# -*- coding: utf-8 -*-
"""Tugas Pemrograman 3 - Kel. 17 - Naive Bayes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14PpBCMGecWngBnTf_hyAMusOaLn_-UuE
"""

# pip install XlsxWriter
import pandas as pd
import math
from openpyxl import load_workbook
import xlsxwriter

def importData():
  # Buat list untuk tiap data
  dataTrain = []
  dataTest = []

  # Membaca file
  xls = pd.ExcelFile('traintest.xlsx')
  trainSheet = pd.read_excel(xls, 'train')
  testSheet = pd.read_excel(xls, 'test')

  # Memasukan data train ke dalam list dataTrain
  for train in range(len(trainSheet['id'])):
    dataTrain.append([])
    dataTrain[train].append(trainSheet['id'][train])
    dataTrain[train].append(trainSheet['x1'][train])
    dataTrain[train].append(trainSheet['x2'][train])
    dataTrain[train].append(trainSheet['x3'][train])
    dataTrain[train].append(trainSheet['y'][train])
  
  # Memasukan data test ke dalam list dataTest
  for test in range(len(testSheet['id'])):
    dataTest.append([])
    dataTest[test].append(testSheet['id'][test])
    dataTest[test].append(testSheet['x1'][test])
    dataTest[test].append(testSheet['x2'][test])
    dataTest[test].append(testSheet['x3'][test])
    dataTest[test].append(testSheet['y'][test])

  return dataTrain, dataTest

def mean(dataTrain):
  # Buat list mean berdasarkan output (1 = True, 0 = False)
  meanTrue = []
  meanFalse = []

  # inisiasi variabel
  totTrue = 0
  totFalse = 0

  totX1true = 0
  totX2true = 0
  totX3true = 0

  totX1false = 0
  totX2false = 0
  totX3false = 0

  # proses menghitung mean
  for i in range(len(dataTrain)):
    if (dataTrain[i][4] == 1):
      totX1true += dataTrain[i][1]
      totX2true += dataTrain[i][2]
      totX3true += dataTrain[i][3]
      totTrue += 1
    else:
      totX1false += dataTrain[i][1]
      totX2false += dataTrain[i][2]
      totX3false += dataTrain[i][3]
      totFalse += 1
  
  meanX1true = totX1true/totTrue
  meanX2true = totX2true/totTrue
  meanX3true = totX3true/totTrue
  meanX1false = totX1false/totFalse
  meanX2false = totX2false/totFalse
  meanX3false = totX3false/totFalse

  # menjadikan 2 angka belakang koma
  meanX1true = float("{:.2f}".format(meanX1true))
  meanX2true = float("{:.2f}".format(meanX2true))
  meanX3true = float("{:.2f}".format(meanX3true))
  meanX1false = float("{:.2f}".format(meanX1false))
  meanX2false = float("{:.2f}".format(meanX2false))
  meanX3false = float("{:.2f}".format(meanX3false))

  # memasukkan hasil tiap mean ke masing2 list
  meanTrue.extend([meanX1true, meanX2true, meanX3true])
  meanFalse.extend([meanX1false, meanX2false, meanX3false])

  return meanTrue, meanFalse

def standardDeviation(dataTrain, meanTrue, meanFalse):
  # Buat list std berdasarkan output (1 = True, 0 = False)
  stdTrue = []
  stdFalse = []

  # inisiasi variabel
  totTrue = 0
  totFalse = 0

  totX1true = 0
  totX2true = 0
  totX3true = 0

  totX1false = 0
  totX2false = 0
  totX3false = 0

  # proses menghitung variance
  for i in range(len(dataTrain)):
    if (dataTrain[i][4] == 1):
      totX1true += ((dataTrain[i][1] - meanTrue[0]) ** 2)
      totX2true += ((dataTrain[i][2] - meanTrue[1]) ** 2)
      totX3true += ((dataTrain[i][3] - meanTrue[2]) ** 2)
      totTrue += 1
    else:
      totX1false += ((dataTrain[i][1] - meanFalse[0]) ** 2)
      totX2false += ((dataTrain[i][2] - meanFalse[1]) ** 2)
      totX3false += ((dataTrain[i][3] - meanFalse[2]) ** 2)
      totFalse += 1
  
  stdX1true = totX1true/(totTrue-1)
  stdX2true = totX2true/(totTrue-1)
  stdX3true = totX3true/(totTrue-1)
  stdX1true = math.sqrt(stdX1true)
  stdX2true = math.sqrt(stdX2true)
  stdX3true = math.sqrt(stdX3true)
  
  stdX1false = totX1false/(totFalse-1)
  stdX2false = totX2false/(totFalse-1)
  stdX3false = totX3false/(totFalse-1)
  stdX1false = math.sqrt(stdX1false)
  stdX2false = math.sqrt(stdX2false)
  stdX3false = math.sqrt(stdX3false) 

  # menjadikan 2 angka belakang koma
  stdX1true = float("{:.2f}".format(stdX1true))
  stdX2true = float("{:.2f}".format(stdX2true))
  stdX3true = float("{:.2f}".format(stdX3true))
  stdX1false = float("{:.2f}".format(stdX1false))
  stdX2false = float("{:.2f}".format(stdX2false))
  stdX3false = float("{:.2f}".format(stdX3false))

  # memasukkan hasil tiap std ke masing2 list
  stdTrue.extend([stdX1true,stdX2true,stdX3true])
  stdFalse.extend([stdX1false,stdX2false,stdX3false])

  return stdTrue,stdFalse

def saveTrainingXlsx(dataTrain, meanTrue, meanFalse, varTrue, varFalse):
  # Membuat file trainingModel.xlsx
  workbook = xlsxwriter.Workbook('trainingModel.xlsx')
  worksheetTrue = workbook.add_worksheet("Recommended")
  worksheetFalse = workbook.add_worksheet("Not Recommended")

  # Mengisi header tiap kolom
  worksheetTrue.write(0,0,'id')
  worksheetTrue.write(0,1,'x1')
  worksheetTrue.write(0,2,'x2')
  worksheetTrue.write(0,3,'x3')
  worksheetTrue.write(0,4,'y')
  worksheetFalse.write(0,0,'id')
  worksheetFalse.write(0,1,'x1')
  worksheetFalse.write(0,2,'x2')
  worksheetFalse.write(0,3,'x3')
  worksheetFalse.write(0,4,'y')

  # Mengisi data tiap baris di sheet berdasarkan output
  idxTrue = 0
  idxFalse = 0
  for i in range(len(dataTrain)):
    if (dataTrain[i][4] == 1):
      worksheetTrue.write(idxTrue+1, 0, dataTrain[i][0])
      worksheetTrue.write(idxTrue+1, 1, dataTrain[i][1])
      worksheetTrue.write(idxTrue+1, 2, dataTrain[i][2])
      worksheetTrue.write(idxTrue+1, 3, dataTrain[i][3])
      worksheetTrue.write(idxTrue+1, 4, dataTrain[i][4])
      idxTrue += 1
    else:
      worksheetFalse.write(idxFalse+1, 0, dataTrain[i][0])
      worksheetFalse.write(idxFalse+1, 1, dataTrain[i][1])
      worksheetFalse.write(idxFalse+1, 2, dataTrain[i][2])
      worksheetFalse.write(idxFalse+1, 3, dataTrain[i][3])
      worksheetFalse.write(idxFalse+1, 4, dataTrain[i][4])
      idxFalse += 1
  
  # Menyimpan model hasil training

  # Starting point
  startTrue = idxTrue + 1
  startFalse = idxFalse + 1

  # Penambahan judul di baris kosong paling bawah tiap sheet
  worksheetTrue.write(startTrue, 0, "MEAN")
  worksheetTrue.write(startTrue+1, 0, "STD")
  worksheetFalse.write(startFalse, 0, "MEAN")
  worksheetFalse.write(startFalse+1, 0, "STD")

  # Mengisi data mean di tiap sheet
  worksheetTrue.write(startTrue, 1, meanTrue[0])
  worksheetTrue.write(startTrue, 2, meanTrue[1])
  worksheetTrue.write(startTrue, 3, meanTrue[2])
  worksheetFalse.write(startFalse, 1, meanFalse[0])
  worksheetFalse.write(startFalse, 2, meanFalse[1])
  worksheetFalse.write(startFalse, 3, meanFalse[2])

  # Mengisi data variance di tiap sheet
  worksheetTrue.write(startTrue + 1, 1, varTrue[0])
  worksheetTrue.write(startTrue + 1, 2, varTrue[1])
  worksheetTrue.write(startTrue + 1, 3, varTrue[2])
  worksheetFalse.write(startFalse + 1, 1, varFalse[0])
  worksheetFalse.write(startFalse + 1, 2, varFalse[1])
  worksheetFalse.write(startFalse + 1, 3, varFalse[2])

  # Menutup dan simpan file
  workbook.close()

def naiveBayes(dataTrain, dataTest, meanTrue, meanFalse, varTrue, varFalse):
  # inisiasi nilai pi dan e
  pi = 3.1416
  e = 2.7183

  # buat list untuk menampung
  recommendedlist = []
  notRecommendedList = []

  # inisiasi variabel
  totTrue = 0
  totFalse = 0

  # cari total data
  for i in range(len(dataTrain)):
    if (dataTrain[i][4] == 1):
      totTrue += 1
    else:
      totFalse += 1

  # hitung nilai dengan rumus Gaussian 
  for data in range(len(dataTest)):
    recommended = (totTrue / len(dataTrain)) * (e ** -((((dataTest[data][1] - meanTrue[0]) ** 2) / (2 * (varTrue[0] ** 2)))) / (varTrue[0] * math.sqrt(2 * pi))) * (e ** -((((dataTest[data][2] - meanTrue[1]) ** 2) / (2 * (varTrue[1] ** 2)))) / (varTrue[1] * math.sqrt(2 * pi))) * (e ** -((((dataTest[data][3] - meanTrue[2]) ** 2) / (2 * (varTrue[2] ** 2)))) / (varTrue[2] * math.sqrt(2 * pi)))
    notRecommended = (totFalse / len(dataTrain)) * (e ** -((((dataTest[data][1] - meanFalse[0]) ** 2) / (2 * (varFalse[0] ** 2)))) / (varFalse[0] * math.sqrt(2 * pi))) * (e ** -((((dataTest[data][2] - meanFalse[1]) ** 2) / (2 * (varFalse[1] ** 2)))) / (varFalse[1] * math.sqrt(2 * pi))) * (e ** -((((dataTest[data][3] - meanFalse[2]) ** 2) / (2 * (varFalse[2] ** 2)))) / (varFalse[2] * math.sqrt(2 * pi)))

    recommendedlist.append(recommended)
    notRecommendedList.append(notRecommended)
  
  return recommendedlist, notRecommendedList

def modelEvaluation(dataTest, recommended, notRecommended):
  for data in range(len(dataTest)):
  # bandingkan kedua nilai tersebut dan masukkan ke dataTest 
    if recommended > notRecommended:
      dataTest[data][4] = 1
    else:
      dataTest[data][4] = 0
  
  return dataTest

def outputXlsx(dataTest):
  book = load_workbook("traintest.xlsx")
  testSheet = book['test']

  # memasukkan hasil output dari testing ke dalam file 'traintest.xlsx'
  for i in range(len(dataTest)):
    testSheet["E"+str(i+2)].value = dataTest[i][4]
  book.save("traintest.xlsx")

# MAIN PROGRAM

# Training 
print("Tekan ENTER untuk memulai TRAINING!")
input()

print("===== MEMULAI TRAINING SESSION =====")
dataTrain, dataTest = importData()
meanTrue, meanFalse = mean(dataTrain)
stdTrue, stdFalse = standardDeviation(dataTrain, meanTrue, meanFalse)
saveTrainingXlsx(dataTrain, meanTrue, meanFalse, stdTrue, stdFalse)

print()
print("TRAINING SELESAI! Silakan cek file 'trainingModel.xlsx'!")
print()

print("========================================================")

# Testing
print()
print("Tekan ENTER untuk memulai TESTING!")
input()

print("===== MEMULAI TESTING SESSION =====")
recommendedList, notRecommendedList = naiveBayes(dataTrain, dataTest, meanTrue, meanFalse, stdTrue, stdFalse)
dataTest = modelEvaluation(dataTest, recommendedList, notRecommendedList)
outputXlsx(dataTest)

print()
print("TRAINING selesai. Data telah diubah, silakan cek file!")